plugins {
	id "fabric-loom"
	id "info.u_team.gradle_files"
	id "info.u_team.curse_gradle_uploader"
	id "maven-publish"
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

gradlefiles.loaderSuffix = "fabric"

group = rootProject.group
archivesBaseName = gradlefiles.archivesBaseName()
version = gradlefiles.version()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

sourceSets {
	multiloader_test_mod
}

loom {
	accessWidenerPath = file("src/main/resources/uteamcore.accesswidener")
	
	runs {
		client {
			runDir "run/client"
			vmArgs "-Dmixin.debug.verbose=true"
			vmArgs "-Dmixin.debug.export=true"
			ideConfigGenerated true
		}
		
		server {
			runDir "run/server"
			vmArgs "-Dmixin.debug.verbose=true"
			vmArgs "-Dmixin.debug.export=true"
			ideConfigGenerated true
		}
	}
	
	mixin {
		defaultRefmapName = "uteamcore.mixins.refmap.json"
	}
}

configurations {
	shade
	implementation.extendsFrom(shade)
}

tasks.named("shadowJar") {
	archiveClassifier = tasks.getByName("jar").archiveClassifier
	destinationDirectory = tasks.getByName("jar").destinationDirectory
	configurations = [project.configurations.shade]
	
	dependsOn tasks.named("jar")
	
	relocate "net.minecraftforge.fml", "info.u_team.u_team_core.internal.shade.net.minecraftforge.fml"
	relocate "net.hycrafthd.update_checker", "info.u_team.u_team_core.internal.shade.net.hycrafthd.update_checker"
}

components.java.withVariantsFromConfiguration(configurations.getByName("shadowRuntimeElements")) {
	skip()
}

tasks.named("remapJar") {
	dependsOn tasks.named("shadowJar")
}

tasks.register("multiLoaderTestJar", Jar) {
	archiveClassifier = "multiloader_test-dev"
	destinationDirectory = new File(project.buildDir, "devlibs")
	
	from sourceSets.multiloader_test_mod.output
}

tasks.register("multiLoaderTestSourcesJar", Jar) {
	archiveClassifier = "multiloader_testsources-dev"
	destinationDirectory = new File(project.buildDir, "devlibs")
	
	from sourceSets.multiloader_test_mod.allJava
}

tasks.register("remapMultiLoaderTestJar", net.fabricmc.loom.task.RemapJarTask) {
	archiveClassifier = "multiloader_test"
	
	dependsOn tasks.named("multiLoaderTestJar")
	input = tasks.getByName("multiLoaderTestJar").archiveFile
}

tasks.register("remapMultiLoaderTestSourcesJar", net.fabricmc.loom.task.RemapSourcesJarTask) {
	archiveClassifier = "multiloader_testsources"
	
	dependsOn tasks.named("multiLoaderTestSourcesJar")
	input = tasks.getByName("multiLoaderTestSourcesJar").archiveFile
}

gradlefiles.assembleDependOn(tasks.getByName("remapMultiLoaderTestJar"), tasks.getByName("remapMultiLoaderTestSourcesJar"))

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

gradlefiles.signDefaultFabricJar()
gradlefiles.signJar("remapMultiLoaderTestJar")

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

sourceSets {
	main {
		java {
			srcDirs += project(":common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += project(":common").sourceSets.common.resources.srcDirs
		}
	}
	multiloader_test_mod {
		java {
			srcDirs += project(":common").sourceSets."common-multiloader_test_mod".java.srcDirs
		}
		resources {
			srcDirs += project(":common").sourceSets."common-multiloader_test_mod".resources.srcDirs
		}
		compileClasspath += main.runtimeClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
	maven {
		url = "https://maven.parchmentmc.org"
	}
	maven {
		url = "https://maven.blamejared.com"
	}
}

dependencies {
	minecraft gradlefiles.fabricMinecraftDependency()
	mappings loom.layered() {
		officialMojangMappings()
		parchment(config.fabric.mapping_layer)
	}
	
	modImplementation gradlefiles.fabricLoaderDependency()
	modImplementation gradlefiles.fabricApiDependency()
	
	shade ("net.hycrafthd.update_checker:update_checker:1.0.0") {
		transitive=false
	}
	
	modCompileOnly "mezz.jei:jei-${config.minecraft.version}-fabric-api:${config.jei.version}"
	modCompileOnly "mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}"
	modRuntimeOnly "mezz.jei:jei-${config.minecraft.version}-fabric:${config.jei.version}"
}

gradlefiles.removePublishingDependency { dependency ->
	"update_checker".equals(dependency.name) || "mezz.jei".equals(dependency.group)
}

processResources {
	inputs.property "version", project.version
	
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

curseforge {
	apiKey = defaultPropertyValue("curseforge.token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.minecraft.version
		addGameVersion "Fabric"
		addGameVersion "Java 17"
		
		relations {
			requiredDependency "fabric-api"
			optionalDependency "jei"
		}
		
		mainArtifact(tasks.getByName("remapJar")) {
			displayName = "${config.curse.display}-Fabric-${config.minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${gradlefiles.changelogUrl()}\">Changelog of ${project.version}</a>"
		}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName
			
			from components.java
			artifact tasks.getByName("remapMultiLoaderTestJar")
			artifact tasks.getByName("remapMultiLoaderTestSourcesJar")
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
					developer {
						name = "MrTroble"
					}
				}
			}
		}
	}
}